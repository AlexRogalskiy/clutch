syntax = "proto3";

package clutch.chaos.serverexperimentation.v1;

import "validate/validate.proto";

option go_package = "github.com/lyft/clutch/backend/api/chaos/serverexperimentation/v1;serverexperimentationv1";

message TestConfig {
  // The pair of clusters specifying the origin and the destination of
  // the traffic that faults should be applied to.
  ClusterPairTarget cluster_pair = 1 [ (validate.rules).message.required = true ];

  oneof fault {
    option (validate.required) = true;

    AbortFaultConfig abort = 2;
    LatencyFaultConfig latency = 3;
  }
}

// Targets requests from downstream_cluster -> upstream_cluster.
message ClusterPairTarget {
  // The name of the downstream cluster.
  string downstream_cluster = 1 [ (validate.rules).string = {min_bytes : 1} ];

  // The name of the upstream cluster.
  string upstream_cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];

  // The fault injection cluster that controls whether faults are
  // injected by downstream or upstream cluster.
  FaultInjectionCluster fault_injection_cluster = 3 [ (validate.rules).enum.defined_only = true ];
}

message AbortFaultConfig {
  // The percentage of requests that will be slowed down.
  float percent = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

  // The abort HTTP status that will be returned.
  int32 http_status = 2 [ (validate.rules).int32 = {gt : 99, lt : 600} ];
}

message LatencyFaultConfig {
  // The percentage of requests that will be slowed down.
  float percent = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

  // The latency duration in milliseconds.
  int32 duration_ms = 2 [ (validate.rules).int32.gt = 0 ];
}

enum FaultInjectionCluster {
  // Fault injection cluster is unspecified. Faults are not injected.
  FAULTINJECTIONCLUSTER_UNSPECIFIED = 0;
  // Faults are injected to egress traffic by a downstream service(s).
  FAULTINJECTIONCLUSTER_DOWNSTREAM = 1;
  // Faults are injected to ingesss traffic by an upstream service(s).
  FAULTINJECTIONCLUSTER_UPSTREAM = 2;
}

message Config {
  oneof fault {
    option (validate.required) = true;

    // Request percentage based faults injected by a downstream cluster. 
    // A decision as to whether inject a fault for a given request is made for 
    // each request separately.
    DownstreamClusterRequestFault downstream_cluster_request_fault = 1;

    // Request percentage based faults injected by an upstream cluster. 
    // A decision as to whether inject a fault for a given request is made for 
    // each request separately.
    UpstreamClusterRequestFault upstream_cluster_request_fault = 2;

    // Host percentage based fault injection by an upstream cluster. A decision 
    // as to whether inject a fault is made on per-host basis. If a given host is 
    // selected all requests handled by the host have faults injected for them.
    UpstreamClusterHostFault upstream_cluster_host_fault = 3;
  }
}

message DownstreamClusterRequestFault {
  // The pair of clusters specifying the origin and the destination of
  // the traffic that faults should be applied to.
  ClusterPair cluster_pair = 1 [(validate.rules).message.required = true];

  oneof fault {
    option (validate.required) = true;

    AbortRequestFault abort = 2;
    LatencyRequestFault latency = 3;
  }
}

message UpstreamClusterRequestFault {
  // The pair of clusters specifying the origin and the destination of
  // the traffic that faults should be applied to.
  ClusterPair cluster_pair = 1 [(validate.rules).message.required = true];

  oneof fault {
    option (validate.required) = true;

    AbortRequestFault abort = 2;
    LatencyRequestFault latency = 3;
  }
}

message UpstreamClusterHostFault {
  // The pair of clusters specifying the origin and the destination of
  // the traffic that faults should be applied to.
  ClusterPair cluster_pair = 1 [(validate.rules).message.required = true];

  oneof fault {
    option (validate.required) = true;

    AbortHostFault abort = 2;
    LatencyHostFault latency = 3;
  }
}

// The cluster pair used for targetting of fault experiments.
message ClusterPair {
  // The name of the downstream cluster.
  string downstream_cluster = 1 [ (validate.rules).string = {min_bytes : 1} ];

  // The name of the upstream cluster.
  string upstream_cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
}

message AbortRequestFault {
  // The percentage of requests to slow down.
  float percentage = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

  // The abort HTTP status to return.
  int32 http_status = 2 [ (validate.rules).int32 = {gt : 99, lt : 600} ];
}

message LatencyRequestFault {
    // The percentage of requests to slow down.
    float percentage = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

    // The latency duration in milliseconds to apply.
    int32 duration_ms = 2 [ (validate.rules).int32.gt = 0 ];
}

message AbortHostFault {
    // The percentage of hosts to have aborts fault injected into all of their requests.
    float percentage = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

    // The abort HTTP status to return.
    int32 http_status = 2 [ (validate.rules).int32 = {gt : 99, lt : 600} ];
}

message LatencyHostFault {
    // The percentage of hosts to have latency fault injected into all of their requests.
    float percentage = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

    // The latency duration in milliseconds to apply.
    int32 duration_ms = 2 [ (validate.rules).int32.gt = 0 ];
}
