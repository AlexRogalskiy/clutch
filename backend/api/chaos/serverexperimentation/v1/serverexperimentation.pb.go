// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: chaos/serverexperimentation/v1/serverexperimentation.proto

package serverexperimentationv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FaultInjectionCluster int32

const (
	// Fault injection cluster is unspecified. Faults are not injected.
	FaultInjectionCluster_FAULTINJECTIONCLUSTER_UNSPECIFIED FaultInjectionCluster = 0
	// Faults are injected to egress traffic by a downstream service(s).
	FaultInjectionCluster_FAULTINJECTIONCLUSTER_DOWNSTREAM FaultInjectionCluster = 1
	// Faults are injected to ingesss traffic by an upstream service(s).
	FaultInjectionCluster_FAULTINJECTIONCLUSTER_UPSTREAM FaultInjectionCluster = 2
)

// Enum value maps for FaultInjectionCluster.
var (
	FaultInjectionCluster_name = map[int32]string{
		0: "FAULTINJECTIONCLUSTER_UNSPECIFIED",
		1: "FAULTINJECTIONCLUSTER_DOWNSTREAM",
		2: "FAULTINJECTIONCLUSTER_UPSTREAM",
	}
	FaultInjectionCluster_value = map[string]int32{
		"FAULTINJECTIONCLUSTER_UNSPECIFIED": 0,
		"FAULTINJECTIONCLUSTER_DOWNSTREAM":  1,
		"FAULTINJECTIONCLUSTER_UPSTREAM":    2,
	}
)

func (x FaultInjectionCluster) Enum() *FaultInjectionCluster {
	p := new(FaultInjectionCluster)
	*p = x
	return p
}

func (x FaultInjectionCluster) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaultInjectionCluster) Descriptor() protoreflect.EnumDescriptor {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_enumTypes[0].Descriptor()
}

func (FaultInjectionCluster) Type() protoreflect.EnumType {
	return &file_chaos_serverexperimentation_v1_serverexperimentation_proto_enumTypes[0]
}

func (x FaultInjectionCluster) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaultInjectionCluster.Descriptor instead.
func (FaultInjectionCluster) EnumDescriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{0}
}

type TestConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pair of clusters specifying the origin and the destination of
	// the traffic that faults should be applied to.
	ClusterPair *ClusterPairTarget `protobuf:"bytes,1,opt,name=cluster_pair,json=clusterPair,proto3" json:"cluster_pair,omitempty"`
	// Types that are assignable to Fault:
	//	*TestConfig_Abort
	//	*TestConfig_Latency
	Fault isTestConfig_Fault `protobuf_oneof:"fault"`
}

func (x *TestConfig) Reset() {
	*x = TestConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestConfig) ProtoMessage() {}

func (x *TestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestConfig.ProtoReflect.Descriptor instead.
func (*TestConfig) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{0}
}

func (x *TestConfig) GetClusterPair() *ClusterPairTarget {
	if x != nil {
		return x.ClusterPair
	}
	return nil
}

func (m *TestConfig) GetFault() isTestConfig_Fault {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (x *TestConfig) GetAbort() *AbortFaultConfig {
	if x, ok := x.GetFault().(*TestConfig_Abort); ok {
		return x.Abort
	}
	return nil
}

func (x *TestConfig) GetLatency() *LatencyFaultConfig {
	if x, ok := x.GetFault().(*TestConfig_Latency); ok {
		return x.Latency
	}
	return nil
}

type isTestConfig_Fault interface {
	isTestConfig_Fault()
}

type TestConfig_Abort struct {
	Abort *AbortFaultConfig `protobuf:"bytes,2,opt,name=abort,proto3,oneof"`
}

type TestConfig_Latency struct {
	Latency *LatencyFaultConfig `protobuf:"bytes,3,opt,name=latency,proto3,oneof"`
}

func (*TestConfig_Abort) isTestConfig_Fault() {}

func (*TestConfig_Latency) isTestConfig_Fault() {}

type ClusterPairTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the downstream cluster.
	DownstreamCluster string `protobuf:"bytes,1,opt,name=downstream_cluster,json=downstreamCluster,proto3" json:"downstream_cluster,omitempty"`
	// The name of the upstream cluster.
	UpstreamCluster string `protobuf:"bytes,2,opt,name=upstream_cluster,json=upstreamCluster,proto3" json:"upstream_cluster,omitempty"`
	// The fault injection cluster that controls whether faults are
	// injected by downstream or upstream cluster.
	FaultInjectionCluster FaultInjectionCluster `protobuf:"varint,3,opt,name=fault_injection_cluster,json=faultInjectionCluster,proto3,enum=clutch.chaos.serverexperimentation.v1.FaultInjectionCluster" json:"fault_injection_cluster,omitempty"`
}

func (x *ClusterPairTarget) Reset() {
	*x = ClusterPairTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairTarget) ProtoMessage() {}

func (x *ClusterPairTarget) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairTarget.ProtoReflect.Descriptor instead.
func (*ClusterPairTarget) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterPairTarget) GetDownstreamCluster() string {
	if x != nil {
		return x.DownstreamCluster
	}
	return ""
}

func (x *ClusterPairTarget) GetUpstreamCluster() string {
	if x != nil {
		return x.UpstreamCluster
	}
	return ""
}

func (x *ClusterPairTarget) GetFaultInjectionCluster() FaultInjectionCluster {
	if x != nil {
		return x.FaultInjectionCluster
	}
	return FaultInjectionCluster_FAULTINJECTIONCLUSTER_UNSPECIFIED
}

type AbortFaultConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage of requests that will be slowed down.
	Percent float32 `protobuf:"fixed32,1,opt,name=percent,proto3" json:"percent,omitempty"`
	// The abort HTTP status that will be returned.
	HttpStatus int32 `protobuf:"varint,2,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
}

func (x *AbortFaultConfig) Reset() {
	*x = AbortFaultConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortFaultConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortFaultConfig) ProtoMessage() {}

func (x *AbortFaultConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortFaultConfig.ProtoReflect.Descriptor instead.
func (*AbortFaultConfig) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{2}
}

func (x *AbortFaultConfig) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *AbortFaultConfig) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

type LatencyFaultConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage of requests that will be slowed down.
	Percent float32 `protobuf:"fixed32,1,opt,name=percent,proto3" json:"percent,omitempty"`
	// The latency duration in milliseconds.
	DurationMs int32 `protobuf:"varint,2,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
}

func (x *LatencyFaultConfig) Reset() {
	*x = LatencyFaultConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyFaultConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyFaultConfig) ProtoMessage() {}

func (x *LatencyFaultConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyFaultConfig.ProtoReflect.Descriptor instead.
func (*LatencyFaultConfig) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{3}
}

func (x *LatencyFaultConfig) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *LatencyFaultConfig) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Fault:
	//	*Config_DownstreamClusterRequestFault
	//	*Config_UpstreamClusterRequestFault
	//	*Config_UpstreamClusterHostFault
	Fault isConfig_Fault `protobuf_oneof:"fault"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{4}
}

func (m *Config) GetFault() isConfig_Fault {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (x *Config) GetDownstreamClusterRequestFault() *DownstreamClusterRequestFault {
	if x, ok := x.GetFault().(*Config_DownstreamClusterRequestFault); ok {
		return x.DownstreamClusterRequestFault
	}
	return nil
}

func (x *Config) GetUpstreamClusterRequestFault() *UpstreamClusterRequestFault {
	if x, ok := x.GetFault().(*Config_UpstreamClusterRequestFault); ok {
		return x.UpstreamClusterRequestFault
	}
	return nil
}

func (x *Config) GetUpstreamClusterHostFault() *UpstreamClusterHostFault {
	if x, ok := x.GetFault().(*Config_UpstreamClusterHostFault); ok {
		return x.UpstreamClusterHostFault
	}
	return nil
}

type isConfig_Fault interface {
	isConfig_Fault()
}

type Config_DownstreamClusterRequestFault struct {
	// Request percentage based faults injected by a downstream cluster.
	// A decision as to whether inject a fault for a given request is made for
	// each request separately.
	DownstreamClusterRequestFault *DownstreamClusterRequestFault `protobuf:"bytes,1,opt,name=downstream_cluster_request_fault,json=downstreamClusterRequestFault,proto3,oneof"`
}

type Config_UpstreamClusterRequestFault struct {
	// Request percentage based faults injected by an upstream cluster.
	// A decision as to whether inject a fault for a given request is made for
	// each request separately.
	UpstreamClusterRequestFault *UpstreamClusterRequestFault `protobuf:"bytes,2,opt,name=upstream_cluster_request_fault,json=upstreamClusterRequestFault,proto3,oneof"`
}

type Config_UpstreamClusterHostFault struct {
	// Host percentage based fault injection by an upstream cluster. A decision
	// as to whether inject a fault is made on per-host basis. If a given host is
	// selected all requests handled by the host have faults injected for them.
	UpstreamClusterHostFault *UpstreamClusterHostFault `protobuf:"bytes,3,opt,name=upstream_cluster_host_fault,json=upstreamClusterHostFault,proto3,oneof"`
}

func (*Config_DownstreamClusterRequestFault) isConfig_Fault() {}

func (*Config_UpstreamClusterRequestFault) isConfig_Fault() {}

func (*Config_UpstreamClusterHostFault) isConfig_Fault() {}

type DownstreamClusterRequestFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pair of clusters specifying the origin and the destination of
	// the traffic that faults should be applied to.
	ClusterPair *ClusterPair `protobuf:"bytes,1,opt,name=cluster_pair,json=clusterPair,proto3" json:"cluster_pair,omitempty"`
	// Types that are assignable to Fault:
	//	*DownstreamClusterRequestFault_Abort
	//	*DownstreamClusterRequestFault_Latency
	Fault isDownstreamClusterRequestFault_Fault `protobuf_oneof:"fault"`
}

func (x *DownstreamClusterRequestFault) Reset() {
	*x = DownstreamClusterRequestFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamClusterRequestFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamClusterRequestFault) ProtoMessage() {}

func (x *DownstreamClusterRequestFault) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamClusterRequestFault.ProtoReflect.Descriptor instead.
func (*DownstreamClusterRequestFault) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{5}
}

func (x *DownstreamClusterRequestFault) GetClusterPair() *ClusterPair {
	if x != nil {
		return x.ClusterPair
	}
	return nil
}

func (m *DownstreamClusterRequestFault) GetFault() isDownstreamClusterRequestFault_Fault {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (x *DownstreamClusterRequestFault) GetAbort() *AbortRequestFault {
	if x, ok := x.GetFault().(*DownstreamClusterRequestFault_Abort); ok {
		return x.Abort
	}
	return nil
}

func (x *DownstreamClusterRequestFault) GetLatency() *LatencyRequestFault {
	if x, ok := x.GetFault().(*DownstreamClusterRequestFault_Latency); ok {
		return x.Latency
	}
	return nil
}

type isDownstreamClusterRequestFault_Fault interface {
	isDownstreamClusterRequestFault_Fault()
}

type DownstreamClusterRequestFault_Abort struct {
	Abort *AbortRequestFault `protobuf:"bytes,2,opt,name=abort,proto3,oneof"`
}

type DownstreamClusterRequestFault_Latency struct {
	Latency *LatencyRequestFault `protobuf:"bytes,3,opt,name=latency,proto3,oneof"`
}

func (*DownstreamClusterRequestFault_Abort) isDownstreamClusterRequestFault_Fault() {}

func (*DownstreamClusterRequestFault_Latency) isDownstreamClusterRequestFault_Fault() {}

type UpstreamClusterRequestFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pair of clusters specifying the origin and the destination of
	// the traffic that faults should be applied to.
	ClusterPair *ClusterPair `protobuf:"bytes,1,opt,name=cluster_pair,json=clusterPair,proto3" json:"cluster_pair,omitempty"`
	// Types that are assignable to Fault:
	//	*UpstreamClusterRequestFault_Abort
	//	*UpstreamClusterRequestFault_Latency
	Fault isUpstreamClusterRequestFault_Fault `protobuf_oneof:"fault"`
}

func (x *UpstreamClusterRequestFault) Reset() {
	*x = UpstreamClusterRequestFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamClusterRequestFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamClusterRequestFault) ProtoMessage() {}

func (x *UpstreamClusterRequestFault) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamClusterRequestFault.ProtoReflect.Descriptor instead.
func (*UpstreamClusterRequestFault) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{6}
}

func (x *UpstreamClusterRequestFault) GetClusterPair() *ClusterPair {
	if x != nil {
		return x.ClusterPair
	}
	return nil
}

func (m *UpstreamClusterRequestFault) GetFault() isUpstreamClusterRequestFault_Fault {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (x *UpstreamClusterRequestFault) GetAbort() *AbortRequestFault {
	if x, ok := x.GetFault().(*UpstreamClusterRequestFault_Abort); ok {
		return x.Abort
	}
	return nil
}

func (x *UpstreamClusterRequestFault) GetLatency() *LatencyRequestFault {
	if x, ok := x.GetFault().(*UpstreamClusterRequestFault_Latency); ok {
		return x.Latency
	}
	return nil
}

type isUpstreamClusterRequestFault_Fault interface {
	isUpstreamClusterRequestFault_Fault()
}

type UpstreamClusterRequestFault_Abort struct {
	Abort *AbortRequestFault `protobuf:"bytes,2,opt,name=abort,proto3,oneof"`
}

type UpstreamClusterRequestFault_Latency struct {
	Latency *LatencyRequestFault `protobuf:"bytes,3,opt,name=latency,proto3,oneof"`
}

func (*UpstreamClusterRequestFault_Abort) isUpstreamClusterRequestFault_Fault() {}

func (*UpstreamClusterRequestFault_Latency) isUpstreamClusterRequestFault_Fault() {}

type UpstreamClusterHostFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pair of clusters specifying the origin and the destination of
	// the traffic that faults should be applied to.
	ClusterPair *ClusterPair `protobuf:"bytes,1,opt,name=cluster_pair,json=clusterPair,proto3" json:"cluster_pair,omitempty"`
	// Types that are assignable to Fault:
	//	*UpstreamClusterHostFault_Abort
	//	*UpstreamClusterHostFault_Latency
	Fault isUpstreamClusterHostFault_Fault `protobuf_oneof:"fault"`
}

func (x *UpstreamClusterHostFault) Reset() {
	*x = UpstreamClusterHostFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamClusterHostFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamClusterHostFault) ProtoMessage() {}

func (x *UpstreamClusterHostFault) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamClusterHostFault.ProtoReflect.Descriptor instead.
func (*UpstreamClusterHostFault) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{7}
}

func (x *UpstreamClusterHostFault) GetClusterPair() *ClusterPair {
	if x != nil {
		return x.ClusterPair
	}
	return nil
}

func (m *UpstreamClusterHostFault) GetFault() isUpstreamClusterHostFault_Fault {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (x *UpstreamClusterHostFault) GetAbort() *AbortHostFault {
	if x, ok := x.GetFault().(*UpstreamClusterHostFault_Abort); ok {
		return x.Abort
	}
	return nil
}

func (x *UpstreamClusterHostFault) GetLatency() *LatencyHostFault {
	if x, ok := x.GetFault().(*UpstreamClusterHostFault_Latency); ok {
		return x.Latency
	}
	return nil
}

type isUpstreamClusterHostFault_Fault interface {
	isUpstreamClusterHostFault_Fault()
}

type UpstreamClusterHostFault_Abort struct {
	Abort *AbortHostFault `protobuf:"bytes,2,opt,name=abort,proto3,oneof"`
}

type UpstreamClusterHostFault_Latency struct {
	Latency *LatencyHostFault `protobuf:"bytes,3,opt,name=latency,proto3,oneof"`
}

func (*UpstreamClusterHostFault_Abort) isUpstreamClusterHostFault_Fault() {}

func (*UpstreamClusterHostFault_Latency) isUpstreamClusterHostFault_Fault() {}

// The cluster pair used for targetting of fault experiments.
type ClusterPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the downstream cluster.
	DownstreamCluster string `protobuf:"bytes,1,opt,name=downstream_cluster,json=downstreamCluster,proto3" json:"downstream_cluster,omitempty"`
	// The name of the upstream cluster.
	UpstreamCluster string `protobuf:"bytes,2,opt,name=upstream_cluster,json=upstreamCluster,proto3" json:"upstream_cluster,omitempty"`
}

func (x *ClusterPair) Reset() {
	*x = ClusterPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPair) ProtoMessage() {}

func (x *ClusterPair) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPair.ProtoReflect.Descriptor instead.
func (*ClusterPair) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterPair) GetDownstreamCluster() string {
	if x != nil {
		return x.DownstreamCluster
	}
	return ""
}

func (x *ClusterPair) GetUpstreamCluster() string {
	if x != nil {
		return x.UpstreamCluster
	}
	return ""
}

type AbortRequestFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage of requests to slow down.
	Percentage float32 `protobuf:"fixed32,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// The abort HTTP status to return.
	HttpStatus int32 `protobuf:"varint,2,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
}

func (x *AbortRequestFault) Reset() {
	*x = AbortRequestFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortRequestFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortRequestFault) ProtoMessage() {}

func (x *AbortRequestFault) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortRequestFault.ProtoReflect.Descriptor instead.
func (*AbortRequestFault) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{9}
}

func (x *AbortRequestFault) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *AbortRequestFault) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

type LatencyRequestFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage of requests to slow down.
	Percentage float32 `protobuf:"fixed32,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// The latency duration in milliseconds to apply.
	DurationMs int32 `protobuf:"varint,2,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
}

func (x *LatencyRequestFault) Reset() {
	*x = LatencyRequestFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyRequestFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyRequestFault) ProtoMessage() {}

func (x *LatencyRequestFault) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyRequestFault.ProtoReflect.Descriptor instead.
func (*LatencyRequestFault) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{10}
}

func (x *LatencyRequestFault) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *LatencyRequestFault) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

type AbortHostFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage of hosts to have aborts fault injected into all of their requests.
	Percentage float32 `protobuf:"fixed32,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// The abort HTTP status to return.
	HttpStatus int32 `protobuf:"varint,2,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
}

func (x *AbortHostFault) Reset() {
	*x = AbortHostFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortHostFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortHostFault) ProtoMessage() {}

func (x *AbortHostFault) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortHostFault.ProtoReflect.Descriptor instead.
func (*AbortHostFault) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{11}
}

func (x *AbortHostFault) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *AbortHostFault) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

type LatencyHostFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage of hosts to have latency fault injected into all of their requests.
	Percentage float32 `protobuf:"fixed32,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// The latency duration in milliseconds to apply.
	DurationMs int32 `protobuf:"varint,2,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
}

func (x *LatencyHostFault) Reset() {
	*x = LatencyHostFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyHostFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyHostFault) ProtoMessage() {}

func (x *LatencyHostFault) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyHostFault.ProtoReflect.Descriptor instead.
func (*LatencyHostFault) Descriptor() ([]byte, []int) {
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP(), []int{12}
}

func (x *LatencyHostFault) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *LatencyHostFault) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

var File_chaos_serverexperimentation_v1_serverexperimentation_proto protoreflect.FileDescriptor

var file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x63, 0x6c,
	0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x02, 0x0a,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x69, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x4f, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x05, 0x61, 0x62,
	0x6f, 0x72, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68,
	0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a, 0x05, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xff, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x36,
	0x0a, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x01, 0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x10, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x7e, 0x0a, 0x17, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6c,
	0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x15, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x10, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0xc8, 0x42, 0x25, 0x00, 0x00, 0x00, 0x00,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xd8, 0x04, 0x20, 0x63, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x69, 0x0a, 0x12, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x07,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa,
	0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0xc8, 0x42, 0x25, 0x00, 0x00, 0x00, 0x00, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x22, 0xb7, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8f, 0x01, 0x0a,
	0x20, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68,
	0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x1d, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x89,
	0x01, 0x0a, 0x1e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68,
	0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x18, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x0c, 0x0a,
	0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xb8, 0x02, 0x0a, 0x1d,
	0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61,
	0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x50,
	0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x12, 0x56, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xb6, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x50, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e,
	0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x56, 0x0a, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x75,
	0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x0c, 0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0xad, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x4d, 0x0a,
	0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x07,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x6f, 0x73,
	0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x0c, 0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0x79, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x36,
	0x0a, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x01, 0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x10, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x11, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x2f, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0xc8, 0x42, 0x25,
	0x00, 0x00, 0x00, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xd8, 0x04, 0x20,
	0x63, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x70, 0x0a,
	0x13, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d,
	0x00, 0x00, 0xc8, 0x42, 0x25, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x20, 0x00, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22,
	0x6e, 0x0a, 0x0e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0xc8,
	0x42, 0x25, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xd8,
	0x04, 0x20, 0x63, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x6d, 0x0a, 0x10, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00,
	0x00, 0xc8, 0x42, 0x25, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x20, 0x00, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x2a, 0x88,
	0x01, 0x0a, 0x15, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x49, 0x4e,
	0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x55,
	0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x42, 0x5b, 0x5a, 0x59, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x79, 0x66, 0x74, 0x2f, 0x63, 0x6c, 0x75,
	0x74, 0x63, 0x68, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescOnce sync.Once
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescData = file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDesc
)

func file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescGZIP() []byte {
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescOnce.Do(func() {
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescData = protoimpl.X.CompressGZIP(file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescData)
	})
	return file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDescData
}

var file_chaos_serverexperimentation_v1_serverexperimentation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_chaos_serverexperimentation_v1_serverexperimentation_proto_goTypes = []interface{}{
	(FaultInjectionCluster)(0),            // 0: clutch.chaos.serverexperimentation.v1.FaultInjectionCluster
	(*TestConfig)(nil),                    // 1: clutch.chaos.serverexperimentation.v1.TestConfig
	(*ClusterPairTarget)(nil),             // 2: clutch.chaos.serverexperimentation.v1.ClusterPairTarget
	(*AbortFaultConfig)(nil),              // 3: clutch.chaos.serverexperimentation.v1.AbortFaultConfig
	(*LatencyFaultConfig)(nil),            // 4: clutch.chaos.serverexperimentation.v1.LatencyFaultConfig
	(*Config)(nil),                        // 5: clutch.chaos.serverexperimentation.v1.Config
	(*DownstreamClusterRequestFault)(nil), // 6: clutch.chaos.serverexperimentation.v1.DownstreamClusterRequestFault
	(*UpstreamClusterRequestFault)(nil),   // 7: clutch.chaos.serverexperimentation.v1.UpstreamClusterRequestFault
	(*UpstreamClusterHostFault)(nil),      // 8: clutch.chaos.serverexperimentation.v1.UpstreamClusterHostFault
	(*ClusterPair)(nil),                   // 9: clutch.chaos.serverexperimentation.v1.ClusterPair
	(*AbortRequestFault)(nil),             // 10: clutch.chaos.serverexperimentation.v1.AbortRequestFault
	(*LatencyRequestFault)(nil),           // 11: clutch.chaos.serverexperimentation.v1.LatencyRequestFault
	(*AbortHostFault)(nil),                // 12: clutch.chaos.serverexperimentation.v1.AbortHostFault
	(*LatencyHostFault)(nil),              // 13: clutch.chaos.serverexperimentation.v1.LatencyHostFault
}
var file_chaos_serverexperimentation_v1_serverexperimentation_proto_depIdxs = []int32{
	2,  // 0: clutch.chaos.serverexperimentation.v1.TestConfig.cluster_pair:type_name -> clutch.chaos.serverexperimentation.v1.ClusterPairTarget
	3,  // 1: clutch.chaos.serverexperimentation.v1.TestConfig.abort:type_name -> clutch.chaos.serverexperimentation.v1.AbortFaultConfig
	4,  // 2: clutch.chaos.serverexperimentation.v1.TestConfig.latency:type_name -> clutch.chaos.serverexperimentation.v1.LatencyFaultConfig
	0,  // 3: clutch.chaos.serverexperimentation.v1.ClusterPairTarget.fault_injection_cluster:type_name -> clutch.chaos.serverexperimentation.v1.FaultInjectionCluster
	6,  // 4: clutch.chaos.serverexperimentation.v1.Config.downstream_cluster_request_fault:type_name -> clutch.chaos.serverexperimentation.v1.DownstreamClusterRequestFault
	7,  // 5: clutch.chaos.serverexperimentation.v1.Config.upstream_cluster_request_fault:type_name -> clutch.chaos.serverexperimentation.v1.UpstreamClusterRequestFault
	8,  // 6: clutch.chaos.serverexperimentation.v1.Config.upstream_cluster_host_fault:type_name -> clutch.chaos.serverexperimentation.v1.UpstreamClusterHostFault
	9,  // 7: clutch.chaos.serverexperimentation.v1.DownstreamClusterRequestFault.cluster_pair:type_name -> clutch.chaos.serverexperimentation.v1.ClusterPair
	10, // 8: clutch.chaos.serverexperimentation.v1.DownstreamClusterRequestFault.abort:type_name -> clutch.chaos.serverexperimentation.v1.AbortRequestFault
	11, // 9: clutch.chaos.serverexperimentation.v1.DownstreamClusterRequestFault.latency:type_name -> clutch.chaos.serverexperimentation.v1.LatencyRequestFault
	9,  // 10: clutch.chaos.serverexperimentation.v1.UpstreamClusterRequestFault.cluster_pair:type_name -> clutch.chaos.serverexperimentation.v1.ClusterPair
	10, // 11: clutch.chaos.serverexperimentation.v1.UpstreamClusterRequestFault.abort:type_name -> clutch.chaos.serverexperimentation.v1.AbortRequestFault
	11, // 12: clutch.chaos.serverexperimentation.v1.UpstreamClusterRequestFault.latency:type_name -> clutch.chaos.serverexperimentation.v1.LatencyRequestFault
	9,  // 13: clutch.chaos.serverexperimentation.v1.UpstreamClusterHostFault.cluster_pair:type_name -> clutch.chaos.serverexperimentation.v1.ClusterPair
	12, // 14: clutch.chaos.serverexperimentation.v1.UpstreamClusterHostFault.abort:type_name -> clutch.chaos.serverexperimentation.v1.AbortHostFault
	13, // 15: clutch.chaos.serverexperimentation.v1.UpstreamClusterHostFault.latency:type_name -> clutch.chaos.serverexperimentation.v1.LatencyHostFault
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_chaos_serverexperimentation_v1_serverexperimentation_proto_init() }
func file_chaos_serverexperimentation_v1_serverexperimentation_proto_init() {
	if File_chaos_serverexperimentation_v1_serverexperimentation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPairTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortFaultConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyFaultConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamClusterRequestFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamClusterRequestFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamClusterHostFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortRequestFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyRequestFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortHostFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyHostFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TestConfig_Abort)(nil),
		(*TestConfig_Latency)(nil),
	}
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Config_DownstreamClusterRequestFault)(nil),
		(*Config_UpstreamClusterRequestFault)(nil),
		(*Config_UpstreamClusterHostFault)(nil),
	}
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DownstreamClusterRequestFault_Abort)(nil),
		(*DownstreamClusterRequestFault_Latency)(nil),
	}
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*UpstreamClusterRequestFault_Abort)(nil),
		(*UpstreamClusterRequestFault_Latency)(nil),
	}
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*UpstreamClusterHostFault_Abort)(nil),
		(*UpstreamClusterHostFault_Latency)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chaos_serverexperimentation_v1_serverexperimentation_proto_goTypes,
		DependencyIndexes: file_chaos_serverexperimentation_v1_serverexperimentation_proto_depIdxs,
		EnumInfos:         file_chaos_serverexperimentation_v1_serverexperimentation_proto_enumTypes,
		MessageInfos:      file_chaos_serverexperimentation_v1_serverexperimentation_proto_msgTypes,
	}.Build()
	File_chaos_serverexperimentation_v1_serverexperimentation_proto = out.File
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_rawDesc = nil
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_goTypes = nil
	file_chaos_serverexperimentation_v1_serverexperimentation_proto_depIdxs = nil
}
